@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject LoginAPI loginAPI

<AuthorizeView>
    <Authorized>
        @if (roles.Contains("Admin"))
        {
            <MudNavLink Href="/admin/home" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
            <MudNavGroup Title="Equipamentos" Expanded="true">
                <MudNavLink Href="/admin/equipamentos">Equipamentos Cadastrados</MudNavLink>
                <MudNavLink Href="/admin/equipamentos/cadastrar">Cadastrar Equipamentos</MudNavLink>
            </MudNavGroup>
        }
        else if (roles.Contains("Professor"))
        {
            <MudNavLink Href="/admin/home" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
            <MudNavGroup Title="Equipamentos" Expanded="true">
                <MudNavLink Href="/admin/equipamentos">Equipamentos Cadastrados</MudNavLink>
                <MudNavLink Href="/admin/equipamentos/cadastrar">Cadastrar Equipamentos</MudNavLink>
            </MudNavGroup>
        }
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code {
    private AuthenticationState? authState;
    private List<string> roles = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            roles = await loginAPI.GetUserRolesAsync(user.Identity.Name);
        }
    }
}


