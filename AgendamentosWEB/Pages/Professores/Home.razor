@page "/home"
@using AgendamentoAPI.Response
@inject LoginAPI loginAPI
@inject AgendamentosAPI agendamentosAPI
@inject ProfessoresAPI professoresId
@inject NavigationManager Navigation
@inject ISnackbar Snackbar



@if (agendamentos == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    var agendamentosHoje = agendamentos.Where(a => a.Data.Date == DateTime.Today);
    @if (!agendamentosHoje.Any())
    {
        <center>
            <div style="display: flex; justify-content: center; align-items: center; height: 50vh; width: 100%; max-width: 100vw;">
                <MudContainer Class="d-flex flex-column align-items-center justify-content-center text-center p-2" style="max-width: 90%;">
                    <center><MudIcon Icon="@Icons.Material.Filled.SentimentVeryDissatisfied" Color="Color.Primary" Size="Size.Large" Class="custom-icon mb-3" /></center>
                    <MudText Typo="Typo.h5" Class="my-4 mx-2">Você não tem agendamentos para hoje</MudText>
                    <MudButton Variant="@MudBlazor.Variant.Text" Color="Color.Primary" OnClick="IrParaAgendar">Agendar agora</MudButton>
                </MudContainer>
            </div>
        </center>
    }





    else
    {
        <MudStack Class="mt-4 mb-4" Row="true" Justify="Justify.SpaceBetween">
            <MudText Class="mb-4" Typo="Typo.h5">Seus agendamentos de hoje!</MudText>
        </MudStack>
        <MudGrid>
            @foreach (var agendamento in agendamentosHoje)
            {
                <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText>Aula: @agendamento.NomeAula</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText>Equipamento: @agendamento.NomeEquipamento</MudText>
                            <MudText>Data: @agendamento.Data.ToString("dd/MM/yyyy")</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
        <div style="height: 200px;">
            <MudStack Class="mt-4 mb-4" Row="true" Justify="Justify.Center">
                <MudPagination Count="@totalPaginas" SelectedChanged="PaginaMudou"></MudPagination>
            </MudStack>
        </div>
    }
}


@code {
    private ICollection<AgendamentoResponse>? agendamentos;
    private int currentPage = 1;
    private int tamanho = 8;
    private int totalItens;
    private int totalPaginas;
    private ICollection<AgendamentoResponse>? listaCompleta = Enumerable.Empty<AgendamentoResponse>().ToList();

    protected override async Task OnInitializedAsync()
    {
        var userInfo = await loginAPI.GetUserInfoAsync();
        if (userInfo != null)
        {
            var userName = userInfo.UserName;
            var professorId = await professoresId.GetProfessorIdByUserNameAsync(userName);
            if (professorId.HasValue)
            {
                listaCompleta = await agendamentosAPI.GetAgendamentosPorProfessorIdAsync(professorId.Value);
            }
            else
            {
                Snackbar.Add("Professor não encontrado", Severity.Error);
            }
            if (listaCompleta is not null)
            {
                listaCompleta = listaCompleta.Where(a => a.Data.Date == DateTime.Today).OrderByDescending(a => a.Id).ToList();
                totalItens = listaCompleta.Count();
                totalPaginas = Convert.ToInt32(Math.Ceiling((totalItens * 1.0) / tamanho));
                this.PaginaMudou(1);
            }
        }
    }

    private async Task IrParaAgendar()
    {
        Navigation.NavigateTo("/agendar");
    }

    private void PaginaMudou(int pageNumber)
    {
        var indice = pageNumber - 1;
        agendamentos = listaCompleta!
            .Skip(tamanho * indice)
            .Take(tamanho)
            .ToList();
    }
}


