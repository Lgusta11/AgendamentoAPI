@page "/auth/Login"
@using Microsoft.AspNetCore.Components.Authorization
@inject LoginAPI loginAPI
@inject NavigationManager Navigation
@attribute [AllowAnonymous]
@inject IJSRuntime JS

<MudPaper Class="px-8 pt-2 pb-4 mx-16 my-8" Justify="Justify.Center">

    <AuthorizeView>
        <Authorized>      
            @if (roles.Contains("Admin"))
            {
            Navigation.NavigateTo("/Admin/Home");
                return;
            }
            else if (roles.Contains("Professores"))
            {
            Navigation.NavigateTo("/Home");
                return;
            }
        </Authorized>
        <NotAuthorized>
            <MudForm>

                <MudTextField T="string" Label="Email" @bind-Value="email"
                              Variant="Variant.Outlined" Class="my-4"
                              Required="true" RequiredError="Email obrigatório!"
                              OnlyValidateIfDirty="true" />

                <MudTextField T="string" Label="Senha" @bind-Value="senha"
                              InputType="InputType.Password"
                              Variant="Variant.Outlined" Class="my-4"
                              Required="true" RequiredError="Senha obrigatória!"
                              OnlyValidateIfDirty="true" />

                <MudButton Variant="Variant.Filled" Color="Color.Secondary"
                           Class="my-6" @onclick="FazerLogin">
                    Login
                </MudButton>

            </MudForm>
        </NotAuthorized>
    </AuthorizeView>

</MudPaper>

@code {
    private string? email;
    private string? senha;
    private List<string> roles = new List<string>();
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private async Task FazerLogin()
    {
        var resposta = await loginAPI.LoginAsync(email, senha);
        if (resposta.Sucesso)
        {
            // Aqui você pode armazenar o token em algum lugar para uso posterior
            var tokenAsString = string.Join(",", resposta.Token);
            await JS.InvokeVoidAsync("localStorage.setItem", "MeuCookieJWT", tokenAsString);

            // Recupere as funções do usuário
            roles = await loginAPI.GetUserRolesAsync(email!);

            if (roles.Contains("Admin"))
            {
                Navigation.NavigateTo("/Admin/Home");
                return;
            }
            else if (roles.Contains("Professores"))
            {
                Navigation.NavigateTo("/Home");
                return;
            }
            else if (ReturnUrl is not null)
            {
                // Se o usuário não tiver uma função específica, use ReturnUrl
                Navigation.NavigateTo(ReturnUrl);
                return;
            }
        }
    }


}

}
