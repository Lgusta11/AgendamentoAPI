@page "/auth/Login"
@using Microsoft.AspNetCore.Components.Authorization
@inject LoginAPI loginAPI
@inject NavigationManager Navigation
@attribute [AllowAnonymous]
@inject IJSRuntime JS



    <AuthorizeView>
        <Authorized>      
            @if (roles.Contains("Admin"))
            {
            Navigation.NavigateTo("/Admin/Home");
                return;
            }
            else if (roles.Contains("Professores"))
            {
            Navigation.NavigateTo("/Home");
                return;
            }
        </Authorized>
        <NotAuthorized>
         <MudForm>
    <MudContainer Style="max-width: 500px; margin: auto;">
        <MudPaper Elevation="1" Square="false" Class="pa-6">
            <MudTitle Typo="Typo.h4">Login</MudTitle>
            <MudText Typo="Typo.body1">Por favor, insira suas credenciais para entrar.</MudText>
            <MudTextField T="string" Label="Email" @bind-Value="email"
                          Variant="Variant.Filled" Class="mt-5"
                          Required="true" RequiredError="Email obrigatório!"
                          OnlyValidateIfDirty="true" FullWidth="true" />

            <MudTextField T="string" Label="Senha" @bind-Value="senha"
                          InputType="InputType.Password"
                          Variant="Variant.Filled" Class="mt-5"
                          Required="true" RequiredError="Senha obrigatória!"
                          OnlyValidateIfDirty="true" FullWidth="true" />

            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                       Class="mt-5" FullWidth="true" @onclick="FazerLogin">
                Login
            </MudButton>
        </MudPaper>
    </MudContainer>
</MudForm>

        </NotAuthorized>
    </AuthorizeView>


@code {
    private string? email;
    private string? senha;
    private List<string> roles = new List<string>();
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private async Task FazerLogin()
    {
        var resposta = await loginAPI.LoginAsync(email, senha);
        if (resposta.Sucesso)
        {
            // Aqui você pode armazenar o token em algum lugar para uso posterior
            var tokenAsString = string.Join(",", resposta.Token);
            await JS.InvokeVoidAsync("localStorage.setItem", "MeuCookieJWT", tokenAsString);

            // Recupere as funções do usuário
            roles = await loginAPI.GetUserRolesAsync(email!);

            if (roles.Contains("Admin"))
            {
                Navigation.NavigateTo("/Admin/Home");
                return;
            }
            else if (roles.Contains("Professores"))
            {
                Navigation.NavigateTo("/Home");
                return;
            }
            else if (ReturnUrl is not null)
            {
                // Se o usuário não tiver uma função específica, use ReturnUrl
                Navigation.NavigateTo(ReturnUrl);
                return;
            }
        }
    }


}

