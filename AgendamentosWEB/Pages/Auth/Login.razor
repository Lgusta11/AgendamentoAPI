@page "/auth/login"
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@inject LoginAPI loginAPI
@inject NavigationManager Navigation
@attribute [AllowAnonymous]
@inject IJSRuntime JS

<AuthorizeView>
    <Authorized>
        <RedirectRole />
    </Authorized>
    <NotAuthorized>
        <MudForm OnValidSubmit="FazerLogin">
            <MudContainer Style="max-width: 500px; margin: auto;">
                <MudPaper Elevation="1" Square="false" Class="pa-6">
                    <MudTitle Typo="Typo.h4">Login</MudTitle>
                    <MudText Typo="Typo.body1">Por favor, insira suas credenciais para entrar.</MudText>
                    <MudTextField T="string" Label="Email" @bind-Value="loginData.Email"
                                  Variant="@MudBlazor.Variant.Filled" Class="mt-5"
                                  Required="true" RequiredError="Email obrigatório!"
                                  OnlyValidateIfDirty="true" FullWidth="true" InputId="emailField" />

                    <MudTextField T="string" Label="Senha" @bind-Value="loginData.Senha"
                                  InputType="InputType.Password"
                                  Variant="@MudBlazor.Variant.Filled" Class="mt-5"
                                  Required="true" RequiredError="Senha obrigatória!"
                                  OnlyValidateIfDirty="true" FullWidth="true" InputId="passwordField" />


                    <MudButton Variant="@MudBlazor.Variant.Filled" Color="Color.Primary" @onclick="FazerLogin"
                               Class="mt-5" FullWidth="true" Type="submit">
                        Login
                    </MudButton>
                </MudPaper>
            </MudContainer>
        </MudForm>
    </NotAuthorized>
</AuthorizeView>

@code {
    private LoginData loginData = new LoginData();


    [Inject] ISnackbar? Snackbar { get; set; }

    private class LoginData
    {
        [Required(ErrorMessage = "Email obrigatório!")]
        [EmailAddress(ErrorMessage = "Email inválido!")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Senha obrigatória!")]
        [MinLength(6, ErrorMessage = "A senha deve ter pelo menos 6 caracteres!")]
        public string Senha { get; set; }
    }

    private async Task FazerLogin()
    {
        if (string.IsNullOrEmpty(loginData.Email) || string.IsNullOrEmpty(loginData.Senha))
        {
            Snackbar!.Add("Erro: Preencha todos os campos!", Severity.Error);
            return;
        }

        var resposta = await loginAPI.LoginAsync(loginData.Email, loginData.Senha);
        if (resposta)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            Snackbar!.Add("Erro: Email ou Senha incorretos!", Severity.Error);
        }
    }
}
