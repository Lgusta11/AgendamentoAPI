@page "/auth/login"
@inject HttpClient Http
@using AgendamentosWEB.Requests
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager

<MudContainer Style="width: 100%; height: 100vh; position: relative; background: #000000">
    <MudImage Src="images/photologin.png" Style="width: 250px; padding-top: 10px; margin-bottom: 50px;" />
    <MudText Typo="Typo.h1" Style="color: #df0e12; font-size: 1.5em; margin-bottom: 30px;">ACESSAR A CONTA</MudText>
    <MudTextField @bind-Value="@Email" Label="email" Variant="Variant.Outlined" FullWidth="true" AdornmentIcon="@Icons.Material.Filled.Email" Style="background-color: #343434; color: #df0e12; border: 2px solid rgba(0, 0, 0, 0); border-radius: 5px; font-size: 0.9em; padding: 25px 10px 10px; font-weight: 600;" />
    <MudTextField @bind-Value="@Password" Label="senha" Variant="Variant.Outlined" FullWidth="true" AdornmentIcon="@Icons.Material.Filled.Lock" Style="background-color: #343434; color: #df0e12; border: 2px solid rgba(0, 0, 0, 0); border-radius: 5px; font-size: 0.9em; padding: 25px 10px 10px; font-weight: 600;" />
    <MudButton OnClick="LoginAsync" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Style="width: 80px; height: 60px; padding: 20px; background-color: #df0e12; border-radius: 20px; border: none; color: #F9F9F9; text-transform: uppercase; box-shadow: #df0e12; margin-bottom: 60px;">Entrar</MudButton>
    <MudText Typo="Typo.body1" Style="color: #595959;">2024 © Adolfo Ferreira de Sousa. Todos os direitos reservados.</MudText>
</MudContainer>

@code {
    [CascadingParameter] private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private string? Email { get; set; }
    private string? Password { get; set; }

    private async Task LoginAsync()
    {
        var loginRequest = new LoginRequest { Email = Email, Password = Password };
        var response = await Http.PostAsJsonAsync("auth/Login", loginRequest);
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
            if (content != null && content.ContainsKey("token"))
            {
                var token = content["token"];
                // Aqui você pode armazenar o token em algum lugar para uso posterior

                var authState = await authenticationStateTask!;
                var user = authState.User;
                if (user.IsInRole("Admin"))
                {
                    NavigationManager.NavigateTo("/Admin/Home");
                }
                else if (user.IsInRole("Professor"))
                {
                    NavigationManager.NavigateTo("/Home");
                }
                else
                {
                    NavigationManager.NavigateTo("/");
                }
            }
        }
    }
}
