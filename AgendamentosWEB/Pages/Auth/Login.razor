@page "/auth/login"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager
@attribute [AllowAnonymous]

<AuthorizeView>
    <Authorized>
        <p>Você está conectado como @authState!!.User.Identity.Name </p>
    </Authorized>
    <NotAuthorized>
        <EditForm Model="@loginFormModel" OnValidSubmit="LoginAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudGrid>
                <MudItem xs="12" sm="7">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="Email" Class="mt-3"
                                          @bind-Value="loginFormModel.Email" For="@(() => loginFormModel.Email)" />
                            <MudTextField Label="Senha" HelperText="Escolha uma senha forte" Class="mt-3"
                                          @bind-Value="loginFormModel.Password" For="@(() => loginFormModel.Password)" InputType="InputType.Password" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" @onclick="LoginAsync" Class="ml-auto">Login</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="5">
                    <MudPaper Class="pa-4 mud-height-full">
                        <MudText Typo="Typo.subtitle2">Resumo da validação</MudText>
                        @if (success)
                        {
                            <MudText Color="Color.Success">Sucesso</MudText>
                        }
                        else
                        {
                            <MudText Color="@Color.Error">
                                <ValidationSummary Context="validationContext" />
                            </MudText>
                        }
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.body2" Align="Align.Center">
                        Preencha o formulário corretamente para ver a mensagem de sucesso.
                    </MudText>
                </MudItem>
            </MudGrid>
        </EditForm>

    </NotAuthorized>
</AuthorizeView>


@code {
    private AuthenticationState? authState;
    private LoginFormModel loginFormModel = new LoginFormModel();
    bool success;

    public class LoginFormModel
    {
        [Required]
        [EmailAddress]
        public string? Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "A senha deve ter pelo menos 8 caracteres.", MinimumLength = 8)]
        public string? Password { get; set; }
    }

    private async Task LoginAsync()
    {
        var loginRequest = new LoginRequest { Email = loginFormModel.Email, Password = loginFormModel.Password };
        var response = await Http.PostAsJsonAsync("auth/Login", loginRequest);
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
            if (content != null && content.ContainsKey("token"))
            {
                var token = content["token"];
                // Aqui você pode armazenar o token em algum lugar para uso posterior

                NavigationManager.NavigateTo("/");
            }
        }
    }
}
