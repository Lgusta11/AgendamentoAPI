@page "/auth/login"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager
@attribute [AllowAnonymous]
@inject LoginAPI loginAPI

<MudPaper Class="px-8 pt-2 pb-4 mx-16 my-8" Justify="Justify.Center">

    <AuthorizeView>
        <Authorized>
            @if (roles.Contains("Admin"))
            {
                NavigationManager.NavigateTo("/Admin/Home");
            }
            else if (roles.Contains("Professor"))
            {
                NavigationManager.NavigateTo("/Home");
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        </Authorized>
        <NotAuthorized>
            <MudForm>

                <MudTextField T="string" Label="Email" @bind-Value="email"
                              Variant="Variant.Outlined" Class="my-4"
                              Required="true" RequiredError="Email obrigatório!"
                              OnlyValidateIfDirty="true" />

                <MudTextField T="string" Label="Senha" @bind-Value="senha"
                              InputType="InputType.Password"
                              Variant="Variant.Outlined" Class="my-4"
                              Required="true" RequiredError="Senha obrigatória!"
                              OnlyValidateIfDirty="true" />

                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                           Class="my-6" @onclick="LoginAsync">
                    Login
                </MudButton>

            </MudForm>
        </NotAuthorized>
    </AuthorizeView>


</MudPaper>


    @code {
    private LoginFormModel loginFormModel = new LoginFormModel();
    bool success;
    List<string> roles = new List<string>();
    private string? email;
    private string? senha;

    public class LoginFormModel
    {
        [Required]
        [EmailAddress]
        public string? Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "A senha deve ter pelo menos 8 caracteres.", MinimumLength = 8)]
        public string? Password { get; set; }
    }

    private async Task LoginAsync()
    {
        var loginRequest = new LoginRequest { Email = loginFormModel.Email, Password = loginFormModel.Password };
        var response = await loginAPI.LoginAsync(loginRequest);
        if (response.Sucesso)
        {
            // Aqui você pode armazenar o token em algum lugar para uso posterior

            // Verifique a função do usuário
            var user = await loginAPI.GetAuthenticationStateAsync();
            roles = new List<string>(user.User.Claims.Select(c => c.Value));
            if (roles.Contains("Admin"))
            {
                NavigationManager.NavigateTo("/Admin/Home");
            }
            else if (roles.Contains("Professor"))
            {
                NavigationManager.NavigateTo("/Home");
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
    }
    }
    