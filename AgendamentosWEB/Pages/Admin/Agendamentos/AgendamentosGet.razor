@inject AgendamentosAPI agendamentosAPI
@inject NavigationManager Navigation
@page "/admin/agendamentos"
@using AgendamentoAPI.Response

<MudStack Class="mt-4 mb-4" Row="true" Justify="Justify.SpaceBetween">
    <MudText Class="mb-4" Typo="Typo.h4">Agendamentos cadastrados</MudText>
</MudStack>

@if (agendamentos == null)
{
    <center>
        <div style="display: flex; justify-content: center; align-items: center; height: 50vh; width: 100%; max-width: 100vw;">
            <MudContainer Class="d-flex flex-column align-items-center justify-content-center text-center p-2" style="max-width: 90%;">
                <center><MudIcon Icon="@Icons.Material.Filled.SentimentVeryDissatisfied" Color="Color.Primary" Size="Size.Large" Class="custom-icon mb-3" /></center>
                <MudText Typo="Typo.h5" Class="my-4 mx-2">Não tem agendamentos!</MudText>
                <MudButton Variant="@MudBlazor.Variant.Text" Color="Color.Primary" OnClick="IrParaAgendar">Agendar agora</MudButton>
            </MudContainer>
        </div>
    </center>

}
else
{
    <MudGrid>
        @foreach (var agendamento in agendamentos)
        {
             <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@agendamento.Professor</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>Aula: @agendamento.Aulas</MudText>
                    <MudText>Equipamento: @agendamento.Equipamento</MudText>
                    <MudText>Data: @agendamento.Data.ToString("dd/MM/yyyy")</MudText>
                </MudCardContent>
            </MudCard>
            </MudItem>
        }
    </MudGrid>
    <div style="height: 200px;">
        <MudStack Class="mt-4 mb-4" Row="true" Justify="Justify.Center">
            <MudPagination Count="@totalPaginas" SelectedChanged="PaginaMudou"></MudPagination>
        </MudStack>
    </div>
}

@code {
    private ICollection<AgendamentoResponse>? agendamentos;
    private int currentPage = 1;
    private int tamanho = 12;
    private int totalItens;
    private int totalPaginas;
    private ICollection<AgendamentoResponse>? listaCompleta = Enumerable.Empty<AgendamentoResponse>().ToList();

    protected override async Task OnInitializedAsync()
    {
        listaCompleta = await agendamentosAPI.GetAgendamentosAsync();
        if (listaCompleta is not null)
        {
            listaCompleta = listaCompleta.OrderByDescending(a => a.Id).ToList();
            totalItens = listaCompleta.Count();
            totalPaginas = Convert.ToInt32(Math.Ceiling((totalItens * 1.0) / tamanho));
            this.PaginaMudou(1);
        }
    }

    private void PaginaMudou(int pageNumber)
    {
        var indice = pageNumber - 1;
        agendamentos = listaCompleta!
            .Skip(tamanho * indice)
            .Take(tamanho)
            .ToList();
    }

    private async Task IrParaAgendar()
    {
        Navigation.NavigateTo("/admin/agendamentos/cadastrar");

    }
}
