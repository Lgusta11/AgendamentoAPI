@page "/admin/agendamentos/cadastrar"
@using AgendamentosWEB.Requests
@using System.ComponentModel.DataAnnotations
@inject AgendamentosAPI agendamentosAPI
@inject AulasAPI aulasAPI
@inject ProfessoresAPI professoresAPI
@inject EquipamentosAPI equipamentosAPI
@inject NavigationManager Navigation
@inject LoginAPI loginAPI
@inject ISnackbar Snackbar
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http

<AuthorizeView>
    <Authorized Context="authContext">
        <h3>Cadastrar Agendamento</h3>

        @if (aulas == null || equipamentos == null)
        {
            <p>Carregando...</p>
        }
        else
        {
            <RadzenHtmlEditorAlignCenter>
            <EditForm EditContext="@editContext" OnValidSubmit="HandleFormSubmit">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12" sm="7" >
                        <MudCard>
                            <MudCardContent>

                                <MudSelect T="ProfessoresResponse" Label="Escolha o Professor" Required="true" @bind-Value="agendamentoModel.ProfessorSelecionado">
                                    @foreach (var professor in professores)
                                    {
                                        <MudSelectItem Value="professor">@professor.Nome</MudSelectItem>
                                    }
                                </MudSelect>
                                <MudSelect T="AulasResponse" MultiSelection="true" SelectAll="true" SelectAllText="Selecionar todas as aulas" AdornmentIcon="@Icons.Material.Filled.Search" Label="Escolha as aulas" Required="true" SelectedValuesChanged="@(values => UpdateSelectedAulas(values))">
                                    @foreach (var aula in aulas)
                                    {
                                        <MudSelectItem Value="aula">@aula.Aula</MudSelectItem>
                                    }
                                </MudSelect>

                                <MudSelect T="EquipamentoResponse" Label="Escolha o equipamento" Required="true" @bind-Value="agendamentoModel.EquipamentoSelecionado">
                                    @foreach (var equipamento in equipamentos)
                                    {
                                        <MudSelectItem Value="equipamento">@equipamento.Nome</MudSelectItem>
                                    }
                                </MudSelect>

                                <div class="rz-p-6 custom-datepicker">
                                    <RadzenDatePicker @bind-Value=@agendamentoModel.DataSelecionada DateFormat="MM/dd/yyyy" DateRender="DateRender" Inline="true" />
                                </div>
                            </MudCardContent>
                            <MudCardActions>
                                <div class="d-flex align-center justify-space-between mt-4">
                                    <MudButton Variant="@MudBlazor.Variant.Filled"
                                               Color="Color.Primary"
                                               Disabled="@(!editContext.Validate())"
                                               Class="ml-auto"
                                               @onclick="CadastrarAgendamento">
                                        Cadastrar
                                    </MudButton>
                                </div>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" sm="5">
                        <MudPaper Class="pa-4 mud-height-full">
                            <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                            @if (!string.IsNullOrEmpty(apiError) || !string.IsNullOrEmpty(errorMessage))
                            {
                                <MudText Color="Color.Error">
                                    @apiError @errorMessage
                                </MudText>
                            }
                            else if (success)
                            {
                                <MudText Color="Color.Success">Success</MudText>
                            }
                            else
                            {
                                <MudText Color="@Color.Error">
                                    <ValidationSummary />
                                </MudText>
                            }

                        </MudPaper>
                    </MudItem>
                </MudGrid>
                </EditForm>
            </RadzenHtmlEditorAlignCenter>
        }
    </Authorized>
    <NotAuthorized>
        @{
            Navigation.NavigateTo("/auth/login");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private ICollection<AulasResponse> aulas;
    private ICollection<ProfessoresResponse> professores;
    private ICollection<EquipamentoResponse> equipamentos;
    private AgendamentoFormModel agendamentoModel = new AgendamentoFormModel();
    private EditContext editContext;
    bool success;
    string? apiError;
    string? errorMessage;
    private ICollection<AulasResponse> selectedAulas;
    List<PublicHoliday> feriados = new List<PublicHoliday>();


    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(agendamentoModel);
        try
        {
            professores = await professoresAPI.GetProfessoresAsync() ?? new List<ProfessoresResponse>();
            aulas = await aulasAPI.GetAulasAsync() ?? new List<AulasResponse>();
            equipamentos = await equipamentosAPI.GetEquipamentosAsync() ?? new List<EquipamentoResponse>();
            var feriadosApiUrl = "https://date.nager.at/api/v3/PublicHolidays/2024/BR";
            feriados = await Http.GetFromJsonAsync<List<PublicHoliday>>(feriadosApiUrl);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar dados: {ex.Message}", Severity.Error);
        }
    }
    private void UpdateSelectedAulas(IEnumerable<AulasResponse> selected)
    {
        selectedAulas = selected.ToList();
        agendamentoModel.AulasSelecionadas = selectedAulas.Select(a => a.Id).ToList();
    }
    void DateRender(DateRenderEventArgs args)
    {
        DateTime today = DateTime.Today;
        DateTime startOfWeek = today.AddDays(-(int)today.DayOfWeek + (int)DayOfWeek.Monday);
        DateTime endOfWeek = startOfWeek.AddDays(6);

        // Verifica se a data é um sábado ou domingo
        bool isWeekend = args.Date.DayOfWeek == DayOfWeek.Saturday || args.Date.DayOfWeek == DayOfWeek.Sunday;

        // Verifica se a data é um feriado
        bool isHoliday = feriados.Any(f => f.Date == args.Date);

        // Verifica se a data já passou
        bool isPast = args.Date < today;

        // Verifica se a data está fora da semana atual
        bool isOutOfCurrentWeek = args.Date < startOfWeek || args.Date > endOfWeek;

        // Desabilita a data se for final de semana, feriado, no passado ou fora da semana atual
        args.Disabled = isWeekend || isHoliday || isPast || isOutOfCurrentWeek;


    }

    private async Task HandleFormSubmit()
    {
       
        try
        {
            var agendamento = new AgendamentoRequest(agendamentoModel.DataSelecionada.Value, agendamentoModel.AulasSelecionadas, agendamentoModel.EquipamentoSelecionado.Id, agendamentoModel.ProfessorSelecionado.Id);

            var result = await agendamentosAPI.AddAgendamentoAsync(agendamento);

            if (result != null)
            {
                if (result.IsSuccessStatusCode)
                {
                    Snackbar.Add("Agendamento criado com sucesso!", Severity.Success);
                    agendamentoModel = new AgendamentoFormModel();
                    editContext = new EditContext(agendamentoModel);
                    success = true;
                    apiError = string.Empty;
                    Navigation.NavigateTo("/admin/agendamentos");
                }
                else
                {
                    var content = await result.Content.ReadAsStringAsync();
                    errorMessage = content;
                    success = false;
                }
            }
            else
            {
                errorMessage = "A resposta do servidor está vazia.";
                success = false;
            }
        }
        catch (Exception ex)
        {
            apiError = $"Erro ao criar agendamento: {ex.Message}";
            success = false;
            Snackbar.Add(apiError, Severity.Error);
        }
    }



    private async Task CadastrarAgendamento()
    {
        if (!editContext.Validate())
        {
            Snackbar.Add("Por favor, preencha todos os campos.", Severity.Error);
            return;
        }

        await HandleFormSubmit();
    }

    public class AgendamentoFormModel
    {
        [Required(ErrorMessage = "A aula é obrigatória.")]
        public ICollection<int> AulasSelecionadas { get; set; }

        [Required(ErrorMessage = "O equipamento é obrigatório.")]
        public EquipamentoResponse? EquipamentoSelecionado { get; set; }

        [Required(ErrorMessage = "A data é obrigatória.")]
        public DateTime? DataSelecionada { get; set; }

        [Required(ErrorMessage = "O professor é obrigatório.")]
        public ProfessoresResponse? ProfessorSelecionado { get; set; }
    }
    public class PublicHoliday
    {
        public DateTime Date { get; set; }
        public string LocalName { get; set; }
        public string Name { get; set; }
        public string CountryCode { get; set; }
        public bool Fixed { get; set; }
        public bool Global { get; set; }
        public string Type { get; set; }
    }
}

