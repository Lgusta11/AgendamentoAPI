@page "/admin/agendamentos/cadastrar"
@inject AgendamentosAPI agendamentosAPI
@inject AulasAPI aulasAPI
@inject EquipamentosAPI equipamentosAPI
@inject NavigationManager Navigation
@inject LoginAPI loginAPI
@inject ISnackbar Snackbar

<h3>Cadastrar Agendamento</h3>

@if (aulas == null || equipamentos == null)
{
    <p>Carregando...</p>
}
else
{
    <MudForm @ref="form">
        <MudSelect T="AulasResponse" Label="Escolha a aula" @bind-Value="aulaSelecionada">
            @foreach (var aula in aulas)
            {
                <MudSelectItem Value="aula">@aula.Aula</MudSelectItem>
            }
        </MudSelect>

        <MudSelect T="EquipamentoResponse" Label="Escolha o equipamento" @bind-Value="equipamentoSelecionado">
            @foreach (var equipamento in equipamentos)
            {
                <MudSelectItem Value="equipamento">@equipamento.Nome</MudSelectItem>
            }
        </MudSelect>

        <MudDatePicker Label="Escolha uma data" @bind-Date="@dataSelecionada" />

        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Cadastrar</MudButton>
    </MudForm>
}

@code {
    private MudForm form;
    private ICollection<AulasResponse> aulas;
    private ICollection<EquipamentoResponse> equipamentos;
    private AulasResponse aulaSelecionada;
    private EquipamentoResponse equipamentoSelecionado;
    private DateTime? dataSelecionada;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            aulas = await aulasAPI.GetAulasAsync() ?? new List<AulasResponse>();
            equipamentos = await equipamentosAPI.GetEquipamentosAsync() ?? new List<EquipamentoResponse>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar dados: {ex.Message}", Severity.Error);
        }
    }

    private async Task Agendar()
    {
        // Verifica se os dados foram preenchidos corretamente
        if (aulaSelecionada == null || equipamentoSelecionado == null || dataSelecionada == null)
        {
            Snackbar.Add("Por favor, preencha todos os campos.", Severity.Error);
            return;
        }

        var info = await loginAPI.GetUserInfoAsync();
        if (info == null)
        {
            Snackbar.Add("Erro ao obter informações do usuário.", Severity.Error);
            return;
        }

        var professorId = info.Id;
        var agendamento = new AgendamentoRequest(dataSelecionada.Value, aulaSelecionada.Id, equipamentoSelecionado.Id, professorId);

        try
        {
            await agendamentosAPI.AddAgendamentoAsync(agendamento);
            Snackbar.Add("Agendamento criado com sucesso!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao criar agendamento: {ex.Message}", Severity.Error);
        }
    }
}
