@page "/admin/professores/editar/{Id}"
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@inject HttpClient _httpClient
@inject IJSRuntime JS
@inject ProfessoresAPI professoresAPI
@inject AuthenticationStateProvider AuthenticationStateProvider


@inject NavigationManager NavManager

<AuthorizeView>
    <Authorized Context="authContext">
        <EditForm Model="@model" Context="formContext">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="7">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField @bind-Value="model.Nome" Label="Nome" Variant="Variant.Text" FullWidth InputType="InputType.Text" />
                            <MudTextField @bind-Value="model.Email" Label="Email" Variant="Variant.Text" FullWidth InputType="InputType.Email" />
                            <MudTextField @bind-Value="model.Senha" Label="Senha" Variant="Variant.Text" FullWidth InputType="InputType.Password" />
                            <MudTextField @bind-Value="model.ConfirmacaoSenha" Label="Confirmação de Senha" Variant="Variant.Text" FullWidth InputType="InputType.Password" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Success"
                                       Disabled="@(!formContext.Validate())"
                                       Class="ml-auto"
                                       @onclick="EditarProfessor">
                                Atualizar
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="5">
                    <MudPaper Class="pa-4 mud-height-full">
                        <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                        @if (!string.IsNullOrEmpty(apiError))
                        {
                            <MudText Color="Color.Error">@apiError</MudText>
                        }
                        else if (success)
                        {
                            <MudText Color="Color.Success">Success</MudText>
                        }
                        else
                        {
                            <MudText Color="@Color.Error">
                                <ValidationSummary Context="validationContext" />
                            </MudText>
                        }
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </EditForm>
    </Authorized>
    <NotAuthorized>
        @{
            NavManager.NavigateTo("/auth/login");
        }
    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public string? Id { get; set; }

    ProfessorFormModel model = new ProfessorFormModel();
    bool success;
    string? apiError;

    public class ProfessorFormModel
    {
        [Required(ErrorMessage = "O nome é obrigatório.")]
        public string? Nome { get; set; }

        [Required(ErrorMessage = "o email é obrigatório.")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "A senha é obrigatória.")]
        public string? Senha { get; set; }

        [Required(ErrorMessage = "Confirme a senha.")]
        public string? ConfirmacaoSenha { get; set; }

        public bool Validate()
        {
            // Adicione sua lógica de validação aqui
            // Por exemplo, você pode verificar se a senha e a confirmação da senha são iguais
            return Senha == ConfirmacaoSenha;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        var professorData = await professoresAPI.GetProfessorPorIdAsync(int.Parse(Id));
        if (professorData != null)
        {
            model = new ProfessorFormModel
                {
                    Nome = professorData.Nome,
                    Email = professorData.email,
                    Senha = professorData.Senha,
                    ConfirmacaoSenha = professorData.ConfirmacaoSenha
                };
        }
    }

    private async Task EditarProfessor()
    {
        try
        {
            var requestEdit = new ProfessoresRequestEdit(int.Parse(Id), model.Nome!, model.Email!, model.Senha!, model.ConfirmacaoSenha!);
            var response = await _httpClient.PutAsJsonAsync($"professores/{requestEdit.Id}", requestEdit);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Professor atualizado com sucesso!");
                model = new ProfessorFormModel(); // Reset the form
                success = true;
                apiError = string.Empty;
                NavManager.NavigateTo("/admin/professores");
            }
            else
            {
                apiError = "Erro ao atualizar professor: " + response.StatusCode;
                success = false;
            }
        }
        catch (Exception ex)
        {
            apiError = "Erro ao atualizar professor: " + ex.Message;
            success = false;
        }
    }

}