@page "/Admin/Professores"
@inject ProfessoresAPI professoresAPI
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized Context="authContext">
        <MudButton Color="Color.Success" OnClick="@(() => NavManager.NavigateTo("/admin/professores/cadastrar"))">Adicionar Professor</MudButton>
        <MudTable Items="@professores" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<ProfessoresResponse,bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Professores</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Nome</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Ações</MudTh>
            </HeaderContent>
            <RowTemplate Context="professor">
                <MudTd DataLabel="Id">@professor.Id</MudTd>
                <MudTd DataLabel="Nome">@professor.Nome</MudTd>
                <MudTd DataLabel="Email">@professor.Email</MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="@(() => NavManager.NavigateTo($"/admin/equipamentos/editar/{professor.Id}"))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteProfessorAsync(professor.Id))" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </Authorized>
    <NotAuthorized>
        @{
            NavManager.NavigateTo("/auth/login");
        }
    </NotAuthorized>
</AuthorizeView>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Value="@hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Value="@dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Value="@striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Value="@bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />

    <div style="min-width:200px;">
        <MudText Inline="true" Class="align-self-center">Selected: @selectedItem?.Nome</MudText>
    </div>
</div>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString = "";
    private ProfessoresResponse selectedItem = null!;
    private ICollection<ProfessoresResponse>? professores;

    protected override async Task OnInitializedAsync()
    {
        professores = await professoresAPI.GetProfessoresAsync();
    }

    private bool FilterFunc(ProfessoresResponse professores)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (professores.Nome.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task DeleteProfessorAsync(int id)
    {
        bool confirm = await JS.InvokeAsync<bool>("confirm", "Você realmente quer excluir este professor?");
        if (confirm)
        {
            await professoresAPI.DeleteProfessorAsync(id);
            professores = await professoresAPI.GetProfessoresAsync(); // Atualiza a lista de professor
        }
    }
}
