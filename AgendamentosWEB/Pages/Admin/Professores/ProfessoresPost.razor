@page "/admin/professores/cadastrar"
@using MudBlazor
@inject HttpClient _httpClient
@inject IJSRuntime JS
@inject CadastroAPI professoresAPI
@inject NavigationManager NavManager


<center>
<MudContainer>
    <MudItem xs="12" sm="7">
        <MudCard>
            <MudForm Model="@professor" ValidationDelay="0">
                <MudCardContent>
                    <MudTextField @bind-Value="professor.UserName" For="@(() => professor.UserName)" Immediate="true" Label="Nome" FullWidth Required="true" />
                    <MudTextField @bind-Value="professor.Email" For="@(() => professor.Email)" Immediate="true" Label="Email" FullWidth Required="true" />
                    <MudTextField @bind-Value="professor.Password" For="@(() => professor.Password)" Immediate="true" Label="Senha" FullWidth InputType="InputType.Password" Required="true" />
                    <MudTextField @bind-Value="professor.confirmacaoSenha" For="@(() => professor.confirmacaoSenha)" Immediate="true" Label="Confirmação de Senha" FullWidth InputType="InputType.Password" Required="true" />
                </MudCardContent>
                <MudCardActions>
                    <div class="d-flex align-center justify-space-between mt-4">
                        <MudButton Variant="@MudBlazor.Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await CadastrarProfessor())">Cadastrar</MudButton>
                    </div>
                </MudCardActions>
            </MudForm>
        </MudCard>
    </MudItem>
</MudContainer>
</center>


@code {
    UserRequest professor = new UserRequest();
    string apiError = string.Empty;

    [Inject] ISnackbar? Snackbar { get; set; }

    private async Task CadastrarProfessor()
    {
        if (string.IsNullOrWhiteSpace(professor.UserName))
        {
            apiError = "O campo Nome é obrigatório.";
            Snackbar.Add(apiError, Severity.Warning);
            return;
        }

        if (string.IsNullOrWhiteSpace(professor.Email) || !professor.Email.Contains("@"))
        {
            apiError = "Por favor, insira um endereço de e-mail válido.";
            Snackbar.Add(apiError, Severity.Warning);
            return;
        }

        if (string.IsNullOrWhiteSpace(professor.Password) || professor.Password.Length < 6)
        {
            apiError = "A senha deve ter pelo menos 6 caracteres.";
            Snackbar.Add(apiError, Severity.Warning);
            return;
        }

        if (professor.Password != professor.confirmacaoSenha)
        {
            apiError = "A senha e a confirmação de senha não correspondem.";
            Snackbar.Add(apiError, Severity.Warning);
            return;
        }

        // Enviar a solicitação para a API
        var response = await professoresAPI.CadastroProfessorAsync(professor);
        if (response != null)
        {
            NavManager.NavigateTo("/admin/professores");
            Snackbar.Add("Professor cadastrado com sucesso!", Severity.Success);
        }
        else
        {
            apiError = "Erro ao cadastrar professor.";
            Snackbar.Add(apiError, Severity.Error);
        }
    }
}



