@page "/admin/professores/cadastrar"
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@inject HttpClient _httpClient
@inject IJSRuntime JS
@inject CadastroAPI professoresAPI
@inject NavigationManager NavManager


<center>
    <MudContainer>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudForm Model="@professorFormModel" ValidationDelay="0">
                    <MudCardContent>
                        <MudTextField @bind-Value="professorFormModel.UserName" For="@(() => professorFormModel.UserName)" Immediate="true" Label="Nome" FullWidth Required="true" />
                        <MudTextField @bind-Value="professorFormModel.Email" For="@(() => professorFormModel.Email)" Immediate="true" Label="Email" FullWidth Required="true" />
                        <MudTextField @bind-Value="professorFormModel.Senha" For="@(() => professorFormModel.Senha)" Immediate="true" Label="Senha" FullWidth InputType="InputType.Password" Required="true" />
                    </MudCardContent>
                    <MudCardActions>
                        <div class="d-flex align-center justify-space-between mt-4">
                            <MudButton Variant="@MudBlazor.Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await CadastrarProfessor())">Cadastrar</MudButton>
                        </div>
                    </MudCardActions>
                </MudForm>
            </MudCard>
        </MudItem>
    </MudContainer>
</center>


@code {

    ProfessorFormModel professorFormModel = new();

    string apiError = string.Empty;

    [Inject] ISnackbar? Snackbar { get; set; }

    public class ProfessorFormModel
    {
        [Required(ErrorMessage = "O nome é obrigatório.")]
        public string? UserName { get; set; }

        [Required(ErrorMessage = "O email é obrigatória.")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "A senha é obrigatória.")]
        public string? Senha { get; set; }
    }

    private async Task CadastrarProfessor()
    {
        if (string.IsNullOrWhiteSpace(professorFormModel.UserName))
        {
            apiError = "O campo Nome é obrigatório.";
            Snackbar.Add(apiError, Severity.Warning);
            return;
        }

        if (string.IsNullOrWhiteSpace(professorFormModel.Email) || !professorFormModel.Email.Contains("@"))
        {
            apiError = "Por favor, insira um endereço de e-mail válido.";
            Snackbar.Add(apiError, Severity.Warning);
            return;
        }

        if (string.IsNullOrWhiteSpace(professorFormModel.Senha) || professorFormModel.Senha.Length < 6)
        {
            apiError = "A senha deve ter pelo menos 6 caracteres.";
            Snackbar.Add(apiError, Severity.Warning);
            return;
        }

        var professorEn = new UserRequest
            {
                UserName = professorFormModel.UserName,
                Email = professorFormModel.Email,
                Senha = professorFormModel.Senha
            };

        var response = await professoresAPI.CadastroProfessorAsync(professorEn);

        if (response != null)
        {
            NavManager.NavigateTo("/admin/professores");
            Snackbar.Add("Professor cadastrado com sucesso!", Severity.Success);
        }
        else
        {
            apiError = "erro ao cadastrar professor.";
            Snackbar.Add(apiError, Severity.Error);
        }
    }
}



