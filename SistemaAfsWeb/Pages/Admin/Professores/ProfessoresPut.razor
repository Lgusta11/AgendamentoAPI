@page "/admin/professores/editar/{Id}"

@inject HttpClient _httpClient
@inject IJSRuntime JS
@inject ProfessoresAPI professoresAPI
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager

<AuthorizeView>
    <Authorized Context="authContext">
        <EditForm Model="@model" Context="formContext">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="7">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField @bind-Value="model.Nome" Label="Nome" Variant="@MudBlazor.Variant.Text" FullWidth InputType="InputType.Text" />
                            <MudTextField @bind-Value="model.Email" Label="Email" Variant="@MudBlazor.Variant.Text" FullWidth InputType="InputType.Email" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="@MudBlazor.Variant.Filled"
                                       Color="Color.Success"
                                       Disabled="@(!formContext.Validate())"
                                       Class="ml-auto"
                                       @onclick="EditarProfessor">
                                Atualizar
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="5">
                    <MudPaper Class="pa-4 mud-height-full">
                        <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                        @if (!string.IsNullOrEmpty(apiError))
                        {
                            <MudText Color="Color.Error">@apiError</MudText>
                        }
                        else if (success)
                        {
                            <MudText Color="Color.Success">Success</MudText>
                        }
                        else
                        {
                            <MudText Color="@Color.Error">
                                <ValidationSummary Context="validationContext" />
                            </MudText>
                        }
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </EditForm>
    </Authorized>
    <NotAuthorized>
        @{
            NavManager.NavigateTo("/auth/login");
        }
    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public string Id { get; set; }

    ProfessorFormModel model = new ProfessorFormModel();
    bool success;
    string? apiError;

    public class ProfessorFormModel
    {
        public int Id { get; set; } 

        [Required(ErrorMessage = "O nome é obrigatório.")]
        public string? Nome { get; set; }

        [Required(ErrorMessage = "o email é obrigatório.")]
        public string? Email { get; set; }
    }


    protected override async Task OnInitializedAsync()
    {
        var professorData = await professoresAPI.GetProfessorPorIdAsync(int.Parse(Id));
        if (professorData != null)
        {
            model = new ProfessorFormModel
                {
                    Id = professorData.Id, 
                    Nome = professorData.Nome,
                    Email = professorData.email,
                };
        }
    }


    private async Task EditarProfessor()
    {
        try
        {
            var requestEdit = new ProfessoresRequestEdit(model.Id, model.Nome!, model.Email);
            await professoresAPI.UpdateProfessorAsync(requestEdit);
            await JS.InvokeVoidAsync("alert", "Equipamento atualizado com sucesso!");
            model = new ProfessorFormModel // Crie um novo ProfessorFormModel aqui
                {
                    Id = model.Id,
                    Nome = model.Nome,
                    Email = model.Email
                };
            success = true;
            apiError = string.Empty;
            NavManager.NavigateTo("/admin/professores");
        }
        catch (Exception ex)
        {
            apiError = "Erro ao atualizar equipamento: " + ex.Message;
            success = false;
        }
    }

}

